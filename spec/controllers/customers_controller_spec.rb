require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe CustomersController do
  login_admin

  let(:customer) {FactoryGirl.create(:customer,:name => "DHH",:account_id => current_account.id,:email => "zhoubin@networking.io")}
  before(:each) { customer }

  # This should return the minimal set of attributes required to create a valid
  # Sku. As you add validations to Sku, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    {  }
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # CustomersController. Be sure to keep this updated too.
  def valid_session
    {}
  end

  describe "GET index" do
    it "assigns all customers as @customers" do
      get :index,{}, valid_session
      assigns(:customers).to_a.should eq([customer])
    end
  end

  describe "GET potential" do
    it "assigns all customers as @customers" do
      customer.transaction_histories.create(:status => "TRADE_NO_CREATE_PAY",:tid => "1234567890a")
      get :potential,{}, valid_session
      assigns(:customers).to_a.should eq([customer])
    end
  end

  describe "GET potential" do
    it "assigns all customers as @customers" do
      customer.transaction_histories.create(:status => "TRADE_CLOSED_BY_TAOBAO",:tid => "1234567890a")
      get :potential,{}, valid_session
      assigns(:customers).to_a.should eq([customer])
    end
  end

  describe "GET paid" do
    it "assigns all customers as @customers" do
      customer.transaction_histories.create(:status => "TRADE_FINISHED",:tid => "1234567890a")
      get :paid,{}, valid_session
      assigns(:customers).to_a.should eq([customer])
    end
  end

  describe "GET around" do
    it "assigns all customers as @customers" do
      customer.transaction_histories.create(:status => "TRADE_FINISHED",:tid => "1234567890a")
      get :around,{}, valid_session
      assigns(:customers).to_a.should eq([customer])
    end
  end

  describe "GET show" do
    it "assigns the requested customer as @customer" do
      get :show, {:id => customer.to_param}, valid_session
      assigns(:customer).should eq(customer)
    end
  end

  describe "GET send_messages" do
    it "assigns the requested customer as @customer" do
      get :send_messages, {}, valid_session
      assigns(:customers).to_a.should eq([customer])
    end

    it "assigns the requested customer as @product_ids" do
      customer
      get :send_messages, {:product_ids => "1,2,3,4"}, valid_session
      assigns(:product_ids).should eq([1,2,3,4])
    end

    it "assigns the requested customer as @transaction_histories" do
      transaction_history = customer.transaction_histories.create(:tid => "1234567890a",:product_ids => [1])
      get :send_messages, {:product_ids => "1,2,3,4"}, valid_session
      assigns(:transaction_histories).should eq([transaction_history])
    end

    it "assigns the requested customer as @message" do
      transaction_history = customer.transaction_histories.create(:tid => "1234567890a",:product_ids => [1],:receiver_mobile => "15848792001")
      message = Message.new(:send_type => "sms",:recipients => "15848792001")
      get :send_messages, {:product_ids => "1,2,3,4"}, valid_session
      assigns(:message).should be_a_new(Message)
      assigns(:message).attributes.except("_id").should eq(message.attributes.except("_id"))
    end
  end

  describe "PUT invoice_messages" do
    it "assigns the requested customer as @message" do
      get :invoice_messages, {}, valid_session
      assigns(:message).should be_a_new(Message)
      #FIXME
      assigns(:message).ip.should == "0.0.0.0"
      assigns(:message).perator.should == current_user.username
      assigns(:message).account_id.should == current_account.id
    end

    it "creates a new Message" do
      expect {
        put :invoice_messages, {:message => {:send_type => "sms",:recipients => "15848792001",:account_id => current_account.id,:title => "test",:content => "hello world!"}}, valid_session
      }.to change(Message, :count).by(1)
    end

    it "assigns the requested customer as @customer" do
      get :invoice_messages, {}, valid_session
      assigns(:customers).should eq([customer])
    end
  end

  describe "GET get_recipients" do
    it "assigns the requested customer as @product_ids" do
      get :get_recipients, {:product_ids => "1,2"}, valid_session
      assigns(:product_ids).should eq([1,2])
    end

    it "assigns the requested customer as @customers" do
      transaction_history = customer.transaction_histories.create(:tid => "1234567890a",:product_ids => [1],:receiver_mobile => "15848792001")
      get :get_recipients, {:product_ids => "1,2"}, valid_session
      assigns(:customers).should eq([customer])
    end

    it "assigns the requested customer as @transaction_histories" do
      transaction_history = customer.transaction_histories.create(:tid => "1234567890a",:product_ids => [1],:receiver_mobile => "15848792001")
      get :get_recipients, {:product_ids => "1,2"}, valid_session
      assigns(:transaction_histories).should eq([transaction_history])
    end

    it "assigns the requested customer as @text(mail)" do
      transaction_history = customer.transaction_histories.create(:tid => "1234567890a",:product_ids => [1],:receiver_mobile => "15848792001")
      get :get_recipients, {:product_ids => "1,2",:send_type => "mail"}, valid_session
      assigns(:text).should == "zhoubin@networking.io"
    end

    it "assigns the requested customer as @text(sms)" do
      transaction_history = customer.transaction_histories.create(:tid => "1234567890a",:product_ids => [1],:receiver_mobile => "15848792001")
      get :get_recipients, {:product_ids => "1,2",:send_type => "sms"}, valid_session
      assigns(:text).should == "15848792001"
    end
  end
end
