require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe StockOutBillsController do
  login_admin
  let(:warehouse) { FactoryGirl.create(:seller,:account_id => current_account.id) }
  let(:stock_out_bill) {FactoryGirl.create(:stock_out_bill,:account_id => current_account.id,:seller_id => warehouse.id)}
  let(:sku) { create(:sku,:account_id => current_account.id) }
  before(:each) { @stock_out_bill = stock_out_bill }
  # This should return the minimal set of attributes required to create a valid
  # StockOutBill. As you add validations to StockOutBill, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    {stock_type: "ORS", bill_products_attributes: { "0" => {sku_id: sku.id, number: 10, price: 10.0, real_number: 1, total_price: 100.0 }}}
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # StockOutBillsController. Be sure to keep this updated too.
  def valid_session
    {}
  end

  describe "GET index" do
    it "assigns all stock_out_bills as @stock_out_bills" do
      get :index,{:warehouse_id => warehouse}, valid_session
      assigns(:bills).should eq([stock_out_bill])
    end
  end

  describe "GET show" do
    it "assigns the requested stock_out_bill as @stock_out_bill" do
      get :show, {:warehouse_id => warehouse,:id => stock_out_bill.to_param}, valid_session
      assigns(:bill).should eq(stock_out_bill)
    end
  end

  describe "GET new" do
    it "assigns a new stock_out_bill as @stock_out_bill" do
      warehouse.save
      get :new, {:warehouse_id => warehouse}, valid_session
      assigns(:bill).should be_a_new(StockOutBill)
    end
  end

  describe "GET edit" do
    it "assigns the requested stock_out_bill as @stock_out_bill" do
      get :edit, {:warehouse_id => warehouse,:id => stock_out_bill.to_param}, valid_session
      assigns(:bill).should eq(stock_out_bill)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new StockOutBill" do
        expect {
          post :create, {:warehouse_id => warehouse,:stock_out_bill => valid_attributes}, valid_session
        }.to change(StockOutBill, :count).by(1)
      end

      it "assigns a newly created stock_out_bill as @stock_out_bill" do
        post :create, {:warehouse_id => warehouse,:stock_out_bill => valid_attributes}, valid_session
        assigns(:bill).should be_a(StockOutBill)
        assigns(:bill).should be_persisted
      end

      it "redirects to the created stock_out_bill" do
        post :create, {:warehouse_id => warehouse,:stock_out_bill => valid_attributes}, valid_session
        response.should redirect_to(warehouse_stock_out_bill_path(warehouse,StockOutBill.last))
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved stock_out_bill as @stock_out_bill" do
        # Trigger the behavior that occurs when invalid params are submitted
        StockOutBill.any_instance.stub(:save).and_return(false)

        post :create, {:warehouse_id => warehouse,:stock_out_bill => {  }}, valid_session
        assigns(:bill).should be_a_new(StockOutBill)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        StockOutBill.any_instance.stub(:save).and_return(false)
        post :create, {:warehouse_id => warehouse,:stock_out_bill => {  }}, valid_session
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested stock_out_bill" do
        # Assuming there are no other stock_out_bills in the database, this
        # specifies that the StockOutBill created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        StockOutBill.any_instance.should_receive(:update_attributes).with({ "these" => "params" })
        put :update, {:warehouse_id => warehouse,:id => stock_out_bill.to_param, :stock_out_bill => { "these" => "params" }}, valid_session
      end

      it "assigns the requested stock_out_bill as @stock_out_bill" do
        put :update, {:warehouse_id => warehouse,:id => stock_out_bill.to_param, :stock_out_bill => valid_attributes}, valid_session
        assigns(:bill).should eq(stock_out_bill)
      end

      it "redirects to the stock_out_bill" do
        put :update, {:warehouse_id => warehouse,:id => stock_out_bill.to_param, :stock_out_bill => valid_attributes}, valid_session
        response.should redirect_to(warehouse_stock_out_bill_path(warehouse,stock_out_bill))
      end
    end

    describe "with invalid params" do
      it "assigns the stock_out_bill as @stock_out_bill" do
        # Trigger the behavior that occurs when invalid params are submitted
        StockOutBill.any_instance.stub(:save).and_return(false)
        put :update, {:warehouse_id => warehouse,:id => stock_out_bill.to_param, :stock_out_bill => {  }}, valid_session
        assigns(:bill).should eq(stock_out_bill)
      end

      it "re-renders the 'edit' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        StockOutBill.any_instance.stub(:save).and_return(false)
        put :update, {:warehouse_id => warehouse,:id => stock_out_bill.to_param, :stock_out_bill => {  }}, valid_session
        response.should render_template("edit")
      end
    end
  end

end
